package model;


import java.beans.XMLDecoder;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Observable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import algorithms.mazeGenerator.Maze;
import algorithms.search.Solution;



/** 
 * The MyModel class extends Observable and implements Model. 

* @author  hai zagury and livna haim 
* @version 1.0 
* @since 17.5.2015 
**/
public class MyModel extends Observable implements Model,Serializable {
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The executor. */
	ExecutorService executor;
	
	/** The maze map. */
	HashMap<String, Maze> mazeMap;
	
	/** The solution map. */
	HashMap<String, Solution> solutionMap;
	
	/** The maze solution map. */
	SolutionsMap mazeSolutionMap;
	
	/** The run properties. */
	Properties runProperties;
	
	/**
	 * Instantiates a new my model.
	 */
	public MyModel() {
		executor = Executors.newCachedThreadPool();
		mazeMap = new HashMap<>();
		solutionMap = new HashMap<>();
		mazeSolutionMap = new SolutionsMap();
		runProperties = new Properties();
	}
	
	/* (non-Javadoc)
	 * @see model.Model#generateMaze(java.lang.String)
	 */
	@Override
	public void generateMaze(String mazeName) {
		System.out.println("generateMaze");
		
		Future<Maze> f = executor.submit (new CallableMaze(runProperties.getMazeGenerateType(), runProperties.getRows(),runProperties.getCols(),runProperties.getXStartPoint(),runProperties.getYStartPoint()));
		try {
			Maze m = f.get();
			mazeMap.put(mazeName, m);
		} catch (InterruptedException | ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		setChanged();
		notifyObservers("generateMazeComplete " + mazeName);
	}

	/* (non-Javadoc)
	 * @see model.Model#getMaze(java.lang.String)
	 */
	@Override
	public Maze getMaze(String mazeName) {
		System.out.println("getMaze");
		
		return mazeMap.get(mazeName);
	}

	/* (non-Javadoc)
	 * @see model.Model#solveMaze(java.lang.String)
	 */
	@Override
	public void solveMaze(String mazeName) {
		System.out.println("solveMaze");
		Maze maze = mazeMap.get(mazeName);
		Solution solution;
		if (mazeSolutionMap.containsKey(maze)){
			System.out.println("--------Exist-----------");
			solution = mazeSolutionMap.get(maze);
			solutionMap.put(mazeName, solution);
		}
		else{
			System.out.println("--------Not Exist-----------");
			Future<Solution> f = executor.submit (new CallableSolution(maze,runProperties.getSearchType(), runProperties.getHeuristic()));
			try {				
				solution = f.get();
				solutionMap.put(mazeName, solution);
				mazeSolutionMap.put(maze, solution);
			} catch (InterruptedException e) {
				e.printStackTrace();
			} catch (ExecutionException e) {
				e.printStackTrace();
			}
		}
		setChanged();
		notifyObservers("solveMazeCompleted " + mazeName);
		
	}

	/* (non-Javadoc)
	 * @see model.Model#getSolution(java.lang.String)
	 */
	@Override
	public Solution getSolution(String mazeName) {
		System.out.println("getSolution");
		return solutionMap.get(mazeName);
	}

	/* (non-Javadoc)
	 * @see model.Model#stop()
	 */
	@Override
	public void stop() {
		System.out.println("stop");
		ObjectOutputStream out;
		try {
			out = new ObjectOutputStream(new FileOutputStream("Solutions.txt"));
			out.writeObject(mazeSolutionMap);
			out.close();
			executor.shutdown();
		} catch (IOException e) {

			e.printStackTrace();
		}
		
	}

	/* (non-Javadoc)
	 * @see model.Model#upaloadSolutions()
	 */
	@Override
	public void upaloadSolutions() {
		System.out.println("UploadSolutions");
		ObjectInputStream in;
		try {
			in = new ObjectInputStream(new FileInputStream("Solutions.txt"));
			SolutionsMap solutions = (SolutionsMap) in.readObject();
			mazeSolutionMap = solutions;
			in.close();
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	/* (non-Javadoc)
	 * @see model.Model#start()
	 */
	@Override
	public void start() {
		XMLDecoder decoder = null;
		
		try {
			decoder = new XMLDecoder(new FileInputStream("Properties.xml"));
			runProperties = (Properties)decoder.readObject();
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		upaloadSolutions();
		
	}
	


}
